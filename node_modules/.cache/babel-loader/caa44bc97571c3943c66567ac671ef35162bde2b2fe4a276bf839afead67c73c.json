{"ast":null,"code":"export default {\n  data() {\n    return {\n      selectedItemIndex: null\n    };\n  },\n  props: {\n    cart: {\n      type: Array,\n      default: () => []\n    }\n  },\n  computed: {\n    total() {\n      if (this.cart.length === 0) {\n        return 0;\n      }\n      return this.cart.reduce((totalCost, item) => totalCost + item.price * item.quantity, 0);\n    }\n  },\n  methods: {\n    updateFromCart(index) {\n      let newQuantity = prompt('Modify quantity for ' + this.cart[index].name + ':', this.cart[index].quantity);\n      while (newQuantity !== null && newQuantity.trim() === '') {\n        alert('Please enter quantity for ' + this.cart[index].name);\n        this.updateFromCart(index);\n        return;\n      }\n      if (newQuantity !== null) {\n        const parsedQuantity = parseInt(newQuantity);\n        if (!isNaN(parsedQuantity) && parsedQuantity >= 0) {\n          this.$emit('update-quantity', {\n            index,\n            quantity: parsedQuantity\n          });\n        } else {\n          alert('Please do no input negative integer!');\n          this.updateFromCart(index);\n        }\n      }\n    },\n    removeFromCart(index) {\n      this.$emit('remove-from-cart', index);\n    }\n  }\n};","map":{"version":3,"names":["data","selectedItemIndex","props","cart","type","Array","default","computed","total","length","reduce","totalCost","item","price","quantity","methods","updateFromCart","index","newQuantity","prompt","name","trim","alert","parsedQuantity","parseInt","isNaN","$emit","removeFromCart"],"sources":["D:\\Vue Playground\\shopping_cart\\src\\components\\ShoppingCart.vue"],"sourcesContent":["<template>\r\n  <div class=\"cart\">\r\n    <!-- Cart items -->\r\n    <div v-if=\"cart.length === 0\">\r\n      <p>Your cart is empty</p>\r\n    </div>\r\n    <ul v-else>\r\n      <li v-for=\"(item, index) in cart\" :key=\"index\" class=\"cart-item\">\r\n        <div class=\"details\">\r\n          <p class=\"name\">Name: {{ item.name }}</p>\r\n          <p class=\"price\">Price: ₱{{ item.price }}</p>\r\n          <p class=\"quantity\">Quantity: {{ item.quantity }}</p>\r\n        </div>\r\n        <div class=\"btn-group\">\r\n          <button @click=\"updateFromCart(index)\" class=\"btn-update\">Update</button>\r\n          <button @click=\"removeFromCart(index)\" class=\"btn-remove\">Remove</button>\r\n        </div>\r\n      </li>\r\n    </ul>\r\n\r\n    <p class=\"total\">Total: ₱ {{ total }}</p>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      selectedItemIndex: null,\r\n    };\r\n  },\r\n  props: {\r\n    cart: {\r\n      type: Array,\r\n      default: () => [],\r\n    },\r\n  },\r\n  computed: {\r\n    total() {\r\n      if (this.cart.length === 0) {\r\n        return 0;\r\n      }\r\n      return this.cart.reduce((totalCost, item) => totalCost + item.price * item.quantity, 0);\r\n    },\r\n  },\r\n  methods: {\r\n    updateFromCart(index) {\r\n      let newQuantity = prompt('Modify quantity for ' + this.cart[index].name + ':', this.cart[index].quantity);\r\n      \r\n      while (newQuantity !== null && newQuantity.trim() === '') {\r\n        alert('Please enter quantity for ' + this.cart[index].name);\r\n        this.updateFromCart(index); \r\n        return;\r\n      }\r\n      \r\n      if (newQuantity !== null) {\r\n        const parsedQuantity = parseInt(newQuantity);\r\n        if (!isNaN(parsedQuantity) && parsedQuantity >= 0) {\r\n          this.$emit('update-quantity', { index, quantity: parsedQuantity });\r\n        } else {\r\n          alert('Please do no input negative integer!');\r\n          this.updateFromCart(index);\r\n        }\r\n      }\r\n    },\r\n    removeFromCart(index) {\r\n      this.$emit('remove-from-cart', index);\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.cart {\r\n  margin-top: 20px;\r\n}\r\n\r\n.cart-item {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 10px;\r\n  border-bottom: 1px solid #ccc;\r\n}\r\n\r\n.details {\r\n  text-align: left;\r\n  margin: 0;\r\n}\r\n\r\n.details p {\r\n  margin: 0;\r\n  margin-bottom: 5px;\r\n  font-weight: bold;\r\n}\r\n\r\nbutton {\r\n  margin-left: 10px;\r\n}\r\n\r\n.btn-update {\r\n  color: #000;\r\n  padding: 5px 5px;\r\n  cursor: pointer;\r\n  background-color: #FFCC00;\r\n  border: 1px solid #000000;\r\n}\r\n\r\n.btn-update:hover {\r\n  background-color: #aab300;\r\n}\r\n\r\n.btn-remove {\r\n  color: #fff;\r\n  padding: 5px 5px;\r\n  cursor: pointer;\r\n  background-color: #CC0000;\r\n  border: 1px solid #000000;\r\n}\r\n\r\n.btn-remove:hover {\r\n  background-color: #b30000;\r\n}\r\n\r\n.total {\r\n  font-size: 18px;\r\n  font-weight: bold;\r\n  margin-top: 10px;\r\n}\r\n\r\n</style>\r\n"],"mappings":"AAyBA,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,iBAAiB,EAAE;IACrB,CAAC;EACH,CAAC;EACDC,KAAK,EAAE;IACLC,IAAI,EAAE;MACJC,IAAI,EAAEC,KAAK;MACXC,OAAO,EAAEA,CAAA,KAAM;IACjB;EACF,CAAC;EACDC,QAAQ,EAAE;IACRC,KAAKA,CAAA,EAAG;MACN,IAAI,IAAI,CAACL,IAAI,CAACM,MAAK,KAAM,CAAC,EAAE;QAC1B,OAAO,CAAC;MACV;MACA,OAAO,IAAI,CAACN,IAAI,CAACO,MAAM,CAAC,CAACC,SAAS,EAAEC,IAAI,KAAKD,SAAQ,GAAIC,IAAI,CAACC,KAAI,GAAID,IAAI,CAACE,QAAQ,EAAE,CAAC,CAAC;IACzF;EACF,CAAC;EACDC,OAAO,EAAE;IACPC,cAAcA,CAACC,KAAK,EAAE;MACpB,IAAIC,WAAU,GAAIC,MAAM,CAAC,sBAAqB,GAAI,IAAI,CAAChB,IAAI,CAACc,KAAK,CAAC,CAACG,IAAG,GAAI,GAAG,EAAE,IAAI,CAACjB,IAAI,CAACc,KAAK,CAAC,CAACH,QAAQ,CAAC;MAEzG,OAAOI,WAAU,KAAM,IAAG,IAAKA,WAAW,CAACG,IAAI,CAAC,MAAM,EAAE,EAAE;QACxDC,KAAK,CAAC,4BAA2B,GAAI,IAAI,CAACnB,IAAI,CAACc,KAAK,CAAC,CAACG,IAAI,CAAC;QAC3D,IAAI,CAACJ,cAAc,CAACC,KAAK,CAAC;QAC1B;MACF;MAEA,IAAIC,WAAU,KAAM,IAAI,EAAE;QACxB,MAAMK,cAAa,GAAIC,QAAQ,CAACN,WAAW,CAAC;QAC5C,IAAI,CAACO,KAAK,CAACF,cAAc,KAAKA,cAAa,IAAK,CAAC,EAAE;UACjD,IAAI,CAACG,KAAK,CAAC,iBAAiB,EAAE;YAAET,KAAK;YAAEH,QAAQ,EAAES;UAAe,CAAC,CAAC;QACpE,OAAO;UACLD,KAAK,CAAC,sCAAsC,CAAC;UAC7C,IAAI,CAACN,cAAc,CAACC,KAAK,CAAC;QAC5B;MACF;IACF,CAAC;IACDU,cAAcA,CAACV,KAAK,EAAE;MACpB,IAAI,CAACS,KAAK,CAAC,kBAAkB,EAAET,KAAK,CAAC;IACvC;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}